# -*- coding: utf-8 -*-
"""conv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FmPveI6oXlUvqpm1hMCtlEl_En7fglwF
"""

import numpy as np
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.pipeline import make_pipeline

from sklearn.preprocessing import LabelEncoder, StandardScaler
from numpy import mean
from sklearn.model_selection import StratifiedKFold, RepeatedStratifiedKFold
from sklearn.svm import SVC

import MachineLearningCalculator
from TextWriter import convert_to_array

sourcelink = 'D:/CÔNG VIỆC/TIẾN SĨ/CÔNG VIỆC/2023 - 03 Áp dụng hotpot series extraction vào đoán đường huyết bằng Raman/Mau du lieu/May2023Data/'

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directoryimport matplotlib.pyplot as plt
import seaborn as sns

# before Noise-added-Data_Argumentation
data_file_name = 'DataMay2023_14labels_data'
label_file_name = 'DataMay2023_14labels_labels'

# after Noise-added-Data_Argumentation
# data_file_name = 'DataMay2023_14labels_data-Noise-added-Data_Argumentation'
# label_file_name = 'DataMay2023_14labels_labels-Noise-added-Data_Argumentation'

data = pd.read_csv(f'{sourcelink}data-target/{data_file_name}.csv', header=None)
data = data.to_numpy()

target = pd.read_csv(sourcelink + 'data-target/' + label_file_name + '.csv')['has_DM2']
target = np.array([int(x) for x in target])

print("After reshape train data shape:\n", data.shape)
print("1 Sample shape:\n",data[0].shape)
print("An example sample:\n", data[0])
# print(data_reshaped)

print("After reshape train target shape:\n", target.shape)
print("1 Sample shape:\n", target[0].shape)
print("An example sample:\n", target[0])
# print(target_reshaped)

#   Thiết lập các tham số cũng như thiết lập mô hình học máy SVM
model = ExtraTreesClassifier()
    # model = make_pipeline(StandardScaler(), SVC())

max_svm_accuracy_score = 0.0
min_svm_accuracy_score = 1.0

sum_svm_accuracy_score = 0.0
sum_svm_one_vs_rest_auc_ovr = 0.0
sum_svm_one_vs_rest_sensitivity = 0.0
sum_svm_one_vs_rest_specificity = 0.0

    #   Phân chia bộ dữ liệu huấn luyện và kiểm thử, đồng thời thiết lập số chu kỳ thí nghiệm là 5 x 30 = 150
rskf = RepeatedStratifiedKFold(n_splits=5, n_repeats=10)
i = 0
for train_index, test_index in rskf.split(data, target):
    i += 1
    print("Turn:", i)
    print("TRAIN dataset have ", len(train_index), " sample include: ", train_index)
    print("TEST dataset have ", len(test_index), " sample include: ", test_index)
    X_train, X_test = data[train_index], data[test_index]
    y_train, y_test = target[train_index], target[test_index]

    # Huấn luyện
    model.fit(X_train, y_train)
    # y_score = model.predict_proba(X_test)

    # Kiểm thử
    svm_prediction = model.predict(X_test)

    accuracy_score = metrics.accuracy_score(svm_prediction, y_test)
    print(f'SVM accuracy = {accuracy_score}')

    one_vs_rest_sensitivity = MachineLearningCalculator.RvO_sensitivity(svm_prediction, y_test)
    print(f'Sensitivity = {one_vs_rest_sensitivity}')

    one_vs_rest_specificity = MachineLearningCalculator.RvO_specificity(svm_prediction, y_test)
    print(f'Specificity = {one_vs_rest_specificity}')

    sum_svm_one_vs_rest_sensitivity += one_vs_rest_sensitivity
    sum_svm_one_vs_rest_specificity += one_vs_rest_specificity
    sum_svm_accuracy_score += accuracy_score
    # sum_svm_one_vs_rest_auc_ovr += macro_roc_auc_ovr

    print("--------------------------------------")

    if (accuracy_score < min_svm_accuracy_score):
        min_svm_accuracy_score = accuracy_score

    if (accuracy_score > max_svm_accuracy_score):
        max_svm_accuracy_score = accuracy_score

# In kết quả
average_svm_accuracy_score = sum_svm_accuracy_score / i
# average_svm_micro_roc_auc_ovr = sum_svm_one_vs_rest_auc_ovr / i
sum_svm_one_vs_rest_sensitivity = sum_svm_one_vs_rest_sensitivity / i
sum_svm_one_vs_rest_specificity = sum_svm_one_vs_rest_specificity / i

print("Average SVM accuracy: ", average_svm_accuracy_score, "in number of turn: ", i)
# print("Average SVM Micro-averaged One-vs-Rest ROC AUC score: ", average_svm_micro_roc_auc_ovr, "in number of turn: ", i)
print("Average SVM One-vs-Rest ROC Sensitivity: ", sum_svm_one_vs_rest_sensitivity, "in number of turn: ", i)
print("Average SVM One-vs-Rest ROC Specificity: ", sum_svm_one_vs_rest_specificity, "in number of turn: ", i)
# print("Min Random Forest accuracy: ", min_svm_accuracy_score)
# print("Max Random Forest accuracy: ", max_svm_accuracy_score)

#   Chạy hàm main